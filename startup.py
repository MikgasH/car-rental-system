#!/usr/bin/env python3
"""
Azure App Service startup script - FIXED PATHS VERSION
"""

import os
import sys
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def start_service():
    try:
        service_type = os.getenv('SERVICE_TYPE', '').lower()
        logger.info(f"üöÄ Starting service: {service_type}")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é (–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è startup.py)
        current_dir = os.getcwd()
        logger.info(f"üìÇ Current directory: {current_dir}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"üìã Directory contents: {os.listdir(current_dir)}")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
        if current_dir not in sys.path:
            sys.path.insert(0, current_dir)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É shared –≤ Python path
        shared_path = os.path.join(current_dir, 'shared')
        if os.path.exists(shared_path) and shared_path not in sys.path:
            sys.path.insert(0, shared_path)
            logger.info(f"‚úÖ Added shared path: {shared_path}")

        if service_type == 'user':
            logger.info("üîß Starting User Service...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
            services_path = os.path.join(current_dir, 'services')
            user_service_path = os.path.join(services_path, 'user_service')

            logger.info(f"üîç Looking for services at: {services_path}")
            if os.path.exists(services_path):
                logger.info(f"üìÇ Services contents: {os.listdir(services_path)}")
            else:
                logger.error(f"‚ùå Services directory not found: {services_path}")
                return

            logger.info(f"üîç Looking for user_service at: {user_service_path}")
            if os.path.exists(user_service_path):
                logger.info(f"üìÇ User service contents: {os.listdir(user_service_path)}")

                # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ user_service –≤ sys.path
                if user_service_path not in sys.path:
                    sys.path.insert(0, user_service_path)

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É user_service
                os.chdir(user_service_path)
                logger.info(f"üìÅ Changed directory to: {os.getcwd()}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ app.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                app_file = os.path.join(user_service_path, 'app.py')
                if os.path.exists(app_file):
                    logger.info("‚úÖ app.py found!")
                else:
                    logger.error(f"‚ùå app.py not found at: {app_file}")
                    return

                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                logger.info("üì¶ Importing FastAPI app...")
                from app import app
                import uvicorn

                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
                port = int(os.getenv('PORT', 8000))
                logger.info(f"üåê Starting server on port {port}")

                uvicorn.run(
                    app,
                    host="0.0.0.0",
                    port=port,
                    log_level="info"
                )

            else:
                logger.error(f"‚ùå User service directory not found: {user_service_path}")
                logger.info(f"üí° Try checking if 'services' folder exists in: {current_dir}")
                return

        elif service_type == 'car':
            logger.info("üîß Starting Car Service...")
            car_service_path = os.path.join(current_dir, 'services', 'car_service')

            if os.path.exists(car_service_path):
                sys.path.insert(0, car_service_path)
                os.chdir(car_service_path)

                from app import app
                import uvicorn

                port = int(os.getenv('PORT', 8000))
                uvicorn.run(app, host="0.0.0.0", port=port, log_level="info")
            else:
                logger.error(f"‚ùå Car service not found: {car_service_path}")
                return

        elif service_type == 'rental':
            logger.info("üîß Starting Rental Service...")
            rental_service_path = os.path.join(current_dir, 'services', 'rental_service')

            if os.path.exists(rental_service_path):
                sys.path.insert(0, rental_service_path)
                os.chdir(rental_service_path)

                from app import app
                import uvicorn

                port = int(os.getenv('PORT', 8000))
                uvicorn.run(app, host="0.0.0.0", port=port, log_level="info")
            else:
                logger.error(f"‚ùå Rental service not found: {rental_service_path}")
                return

        else:
            logger.error(f"‚ùå Unknown SERVICE_TYPE: '{service_type}'")
            logger.info("üí° Available types: user, car, rental")
            logger.info("üîç Current environment variables:")
            for key, value in os.environ.items():
                if 'SERVICE' in key:
                    logger.info(f"  {key}: {value}")
            return

    except Exception as e:
        logger.error(f"üí• Startup error: {str(e)}")
        import traceback
        logger.error(f"üìã Traceback: {traceback.format_exc()}")
        sys.exit(1)


if __name__ == "__main__":
    logger.info("üéØ Azure App Service startup script")
    logger.info("=" * 50)
    start_service()