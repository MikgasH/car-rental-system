# Azure DevOps Pipeline for Car Rental System
# 3 stages: Build, Test, Deploy (required for 5 points)

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - services/*
    - infrastructure/*

variables:
  # Azure Service Connection (create in Azure DevOps)
  azureServiceConnection: 'car-rental-azure-connection'

  # Azure App Service details
  webAppName: 'car-rental-api'

  # Python version
  pythonVersion: '3.12'

  # Working directory
  workingDirectory: 'services/user-service'

stages:
# STAGE 1: BUILD (required)
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildJob
    displayName: 'Build Python Application'
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'

    - script: |
        python -m pip install --upgrade pip
        pip install -r services/user-service/requirements.txt
      displayName: 'Install dependencies'

    - script: |
        # Create startup script for Azure App Service
        echo "#!/bin/bash" > startup.sh
        echo "cd services/user-service" >> startup.sh
        echo "python app.py" >> startup.sh
        chmod +x startup.sh
      displayName: 'Create startup script'

    - task: ArchiveFiles@2
      displayName: 'Archive application'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

# STAGE 2: TEST (required)
- stage: Test
  displayName: 'Test Stage'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: TestJob
    displayName: 'Run Tests'
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'

    - script: |
        python -m pip install --upgrade pip
        pip install -r services/user-service/requirements.txt
        pip install pytest pytest-asyncio httpx
      displayName: 'Install dependencies and test packages'

    - script: |
        # Create basic test if none exists
        mkdir -p tests
        cat > tests/test_user_service.py << 'EOF'
        import pytest
        import sys
        import os
        
        # Add services directory to path
        sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'services', 'user-service'))
        
        from app import app
        from fastapi.testclient import TestClient
        
        client = TestClient(app)
        
        def test_health_endpoint():
            response = client.get("/health")
            assert response.status_code == 200
            data = response.json()
            assert data["status"] == "healthy"
            assert data["service"] == "user-service"
        
        def test_ping_endpoint():
            response = client.get("/ping")
            assert response.status_code == 200
            data = response.json()
            assert data["message"] == "pong"
            assert data["service"] == "user-service"
        
        def test_metrics_endpoint():
            response = client.get("/metrics")
            assert response.status_code == 200
            data = response.json()
            assert "service" in data
            assert "uptime_seconds" in data
            assert "request_count" in data
        
        def test_users_endpoint():
            response = client.get("/users")
            assert response.status_code == 200
            data = response.json()
            assert "users" in data
            assert "total_count" in data
        
        def test_register_user():
            user_data = {"email": "test@example.com", "name": "Test User"}
            response = client.post("/register", json=user_data)
            assert response.status_code == 200
            data = response.json()
            assert data["message"] == "User registered successfully"
            assert "user_id" in data
        EOF
      displayName: 'Create basic tests'

    - script: |
        cd $(System.DefaultWorkingDirectory)
        python -m pytest tests/ -v --tb=short
      displayName: 'Run tests'

# STAGE 3: DEPLOY (required)
- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Test
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    displayName: 'Deploy to Azure App Service'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(Pipeline.Workspace)'

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: $(azureServiceConnection)
              appType: 'webAppLinux'
              appName: $(webAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              runtimeStack: 'PYTHON|3.12'
              startUpCommand: 'cd services/user-service && python app.py'

# STAGE 4: POST-DEPLOY VERIFICATION
- stage: Verify
  displayName: 'Post-Deploy Verification'
  dependsOn: Deploy
  condition: succeeded()
  jobs:
  - job: VerifyJob
    displayName: 'Verify Deployment'
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - script: |
        echo "Waiting for app to start..."
        sleep 30
        
        # Test health endpoint
        curl -f https://$(webAppName).azurewebsites.net/health || exit 1
        echo "Health check passed!"
        
        # Test ping endpoint  
        curl -f https://$(webAppName).azurewebsites.net/ping || exit 1
        echo "Ping check passed!"
        
        # Test metrics endpoint
        curl -f https://$(webAppName).azurewebsites.net/metrics || exit 1
        echo "Metrics check passed!"
        
        echo "Deployment verification completed successfully!"
      displayName: 'Verify endpoints'